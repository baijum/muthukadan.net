var store = [{
        "title": "Trying Jekyll with GitHub Pages",
        "excerpt":"I just moved my main website to GitHub pages.  GitHub pages is interesting, it uses the static page and blog generator called Jekyll.  It supports Markdown and Textile formats by default.  Now all my site source is hosted in the GitHub.   My website never had any major content except the ZCA book.  So it was not difficult to migrate.  I will try to write some blog posts here.  Let me see how it goes :-)   ","categories": ["update"],
        "tags": [],
        "url": "/update/trying-jekyll-with-github-pages/",
        "teaser": null
      },{
        "title": "Parsing text files using Parsley",
        "excerpt":"I was looking for a parser library to convert a wikisource text into other formats.  The wikisource text contains Holy Bible translation into Malayalam language known as “Sathyavedapusthakam”.   I found Parsley very interesting after watching the PyCon talk by its author.  Parsley doesn’t support Python 3 yet.  Then, I used a fork to run my code.  The fork author has already send a pull request.  So, I hope Parsley will officially support Python 3 soon.   The format of my input file was something as given below.  The actual text contains a mix of Malayalam and English characters encoded in “utf-8” format. However, for simplicity I removed Malayalam from the below input text:   {{Some Text}} {{Navi| Prev=Some Text| Next=Some Text| }} {{Some Text}}  {{verse|1}} Verse One  {{Verse|2}} Verse Two  {{Navi| Prev=Some Text| Next=Some Text| }}   My parsing code is part of a bigger module with other functionalities. Here is a stripped-down version of my parsing code:   import sys import parsley  parser = parsley.makeGrammar(\"\"\" fix = '{{' &lt;((anything|ws):x ?(x not  in '}') -&gt; x)+&gt;:s '}}' -&gt; s num = '{{' ('V'|'v') 'erse|' &lt;digit+&gt;:s '}}' -&gt; int(s) text =  &lt;((anything|ws):x ?(x not in '{') -&gt; x)+&gt;:s  -&gt; s verse = (fix ws){3} (num:n text:t -&gt; (n, t))+:l fix anything* -&gt; l \"\"\", {})  wikitext = open(sys.argv[1]).read() verses = parser(wikitext).verse() print(verses)   I think, the parsing grammar should be possible to improve.  But this is what I reached after many iterations.  If you have any suggestions to improve the grammar, please send it to me :)   If you want to run the above code, save the input text given above in a file and run the program with the input file as an argument.   The output will be a list of tuples.  Each tuple contains an integer and string values.  Here is the output for the above input text:   [(1, ' Verse One\\n\\n'), (2, ' Verse Two\\n\\n')]   The official documentation has enough infomation about the usage. And the git repo has more examples.   ","categories": ["python"],
        "tags": [],
        "url": "/python/parsing-text-files-using-parsley/",
        "teaser": null
      },{
        "title": "ഡിജിറ്റൽ സത്യവേദപുസ്തകം - ഭാഗം ൧",
        "excerpt":"ഏതാനും ചില ആഴ്ചകൾക്ക് മുമ്പ് വിക്കിഗ്രന്ഥശാലയിലുള്ള സത്യവേദപുസ്തകത്തിന്റെ അച്ചടിപ്പിഴവുകൾ തിരുത്തുന്ന പ്രവൎത്തനത്തിൽ ഞാൻ ചേൎന്നു. അതിനെക്കുറിച്ച് ഇവിടെ എഴുതി തുടങ്ങുവാൻ ആഗ്രഹിക്കുന്നു. ഈ പ്രവൎത്തനം കുറച്ചുകൂടി വിപുലമാക്കുന്നതിന്റെ ഭാഗമായി “ഡിജിറ്റൽ സത്യവേദപുസ്തകം” എന്ന ഒരു വെബ്‌സൈറ്റും അതിനോടനുബന്ധിച്ച് ഒരു ഗൂഗിൾ ഗ്രൂപ്പും തുടങ്ങിവെച്ചു.   സത്യവേദപുസ്തകത്തിന്റെ 1923 -നു മുമ്പ് അച്ചടിച്ച പതിപ്പ്   വിക്കിഗ്രന്ഥശാലയിലുള്ള സത്യവേദപുസ്തകത്തിന്റെ ആദ്യ പതിപ്പ് 1910 -ലാണ് അച്ചടിച്ചതെന്ന് കരുതുന്നു. ആയതിനാൽ ഇതിന്റെ പകൎപ്പവകാശം തീൎന്നിട്ടുണ്ടാകും എന്ന് അനുമാനിക്കുന്നു. എന്നാൽ ഇത് സ്ഥിരീകരിക്കുന്നതിനായി 1923 -നു മുമ്പ് അച്ചടിച്ച പതിപ്പ് ലഭ്യമാവേണ്ടതുണ്ട്. അത് കണ്ടെത്തി സ്കാൻ ചെയ്ത് ഡിജിറ്റൽ രൂപത്തിലേക്ക് മാറ്റേണ്ടത് അത്യന്താപേക്ഷിതമാണ്. പഴയ വീടുകളിലോ, ലൈബ്രറികളിലോ ഇത് ഉണ്ടാകാനുള്ള സാധ്യതയുണ്ട്. ഇത് കണ്ടെത്തുവാൻ നിങ്ങളുടെ സഹായം ഈ അവസരത്തിൽ ഞാൻ അഭ്യൎത്ഥിക്കുന്നു.   സത്യവേദപുസ്തകത്തിന്റെ 1923 -നു മുമ്പ് അച്ചടിച്ച പതിപ്പ് കണ്ടെത്തുന്നതിന്റ ഭാഗമായി ഞാൻ “ദി ബൈബിൾ സൊസൈറ്റി ഓഫ് ഇന്ത്യ” -യുടെ ബാംഗ്ലൂരുള്ള “ദി ബൈബിൾ വേൾഡ്” എന്ന സ്ഥിരം പ്രദൎശനം കാണാൻ പോയിരുന്നു. എന്നാൽ അതവിടെ കണ്ടെത്തുവാൻ സാധിച്ചില്ല. അവിടെയുള്ള ആൎക്കൈവ്സ് ശേഖരിക്കുന്ന ഒരു മലയാളിയുമായി കുറെനേരം സംസാരിക്കുവാനിടയായി, അതിൽനിന്നു മനസ്സിലായത് അവരും ഇങ്ങനെയുള്ള പഴയ പതിപ്പുകൾക്കായിട്ടുള്ള അന്വേഷണത്തിലാണെന്നാണ്.   മലയാളത്തിലെ പഴയ പുസ്തകൾ അന്വേഷിക്കുന്ന ഷിജു, ഈ പുസ്തകത്തിന്റെയും അന്വേഷണത്തിലാണ്.   Update (14-November-2014): ഈ അന്വേഷണം അവസാനിച്ചു!   ","categories": ["bible"],
        "tags": [],
        "url": "/bible/sathyavedapusthakam-part-1/",
        "teaser": null
      },{
        "title": "Windows Commands",
        "excerpt":"I had kept these notes in a private wiki page for sometime. I hope moving it here will be helpful for searching.   Deleting a Service   sc delete servicename   To get name of the service that need to be deleted:      Run services.msc   Right click and get the service name   Checking whether a port is listening or not   netstat -na|find \"PORTNUMBER\"   To see all ports listening   netstat -na|find \"LISTENING\"   To check a service is started or not   net start|find \"C:\\Path\\to\\program\"   Commenting in batch file   Use :: or REM followed by a space   Example:-   :: this is a comment REM this is another comment   Call a batch program inside another batch file   call &lt;script.bat&gt;   Query and remove terminal server sessions   Use qwinsta and rwinsta commands.   Example:-   qwinsta /SERVER:IP rwinsta /SERVER:IP   Check uptime of machine   net statistics server | find \"since\"   Run as different user   runas   ","categories": ["technology"],
        "tags": [],
        "url": "/technology/windows-commands/",
        "teaser": null
      },{
        "title": "Selenium Page Objects Pattern",
        "excerpt":"I have added a new chapter on Page Objects in my documenabouttation for Selenium with Python.  Code in this chapter works and is quite self-descriptive, but a little description wouldn’t hurt.  If anyone interested, please send pull request in Github.  If you want an example implementation, I have one as part of my project in Github called pitracker.   I would be very happy to review and accept your pull requests.  As you can see in the Github contributors graph, there are 18 external contributors to this document.  Most of them made just one commit.   The other part of documentation where I am seeking more contribution is chapter on Frequently Asked Questions.   ","categories": ["testing"],
        "tags": [],
        "url": "/testing/selenium-page-objects/",
        "teaser": null
      },{
        "title": "Keynote Speech on Test Automation using Pytest",
        "excerpt":"I delivered a Keynote speech on “Test Automation Using Pytest” at “Non-Conventional Software Test Automation” conference.  The conference was organized by a testing community.  I selected Pytest as my topic and the talk was well received.  This was not really a Python community, but when I asked how many knows Python, around 40% raised their hands.  Thanks to the organizers for inviting me to speak!   )   ","categories": ["testing"],
        "tags": [],
        "url": "/testing/keynote-speech-on-test-automation-using-pytest/",
        "teaser": null
      },{
        "title": "An Introduction to Go Programming",
        "excerpt":"Go, also commonly referred to as golang, is a statically typed, compiled, garbage-collected, concurrent general purpose programming language.  Go is considered as an object oriented programming language and it uses object composition instead of class inheritance.  Go was initially developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.  Go was publicly released as a free/open source software in November 2009 by Google.   There are two major compilers available, gc &amp; gccgo.  The official compiler is gc and gccgo is a front-end to gcc.  Go supports major operating systems including Windows, GNU/Linux, Mac OS X and various flavors of BSDs.  Through gccgo it supports more platforms. And cross compilation is easy in Go.      The syntax of Go is very similar to C programming language.  There are around 25+ keywords in the languages which is smaller compared to C, C++, Python etc.   Go compilation is very fast, few seconds would be enough to compile large programs.  In Go, unused imports and variables raise error during compile time.  A variable starting with capital letter is considered as exported and so it can be used from other packages.   Now I will move on to the details of installation of Go compiler. First you will see instruction for installing in GNU/Linux. The next section explains installation in a Windows system.   Finally I will show running a hello world program.  This will help you to verify your installation.   Linux Installation   Go project provides binaries for major operating systems including GNU/Linux.  You can find 32 bit and 64 bit binaries for GNU/Linux here: https://golang.org/dl/   The following commands will download and install Go compiler in a 64 bit GNU/Linux system:   cd $HOME wget -c https://storage.googleapis.com/golang/go1.7.1.linux-amd64.tar.gz tar zxvf go1.7.1.linux-amd64.tar.gz mkdir $HOME/mygo  The first line ensure that current working directory is the home directory for the user.  The $HOME environment variable contains the path to the user’s home directory.   The second line download the 64 bit binary for GNU/Linux.  The wget is a command line download manager.   The third line extract the downloaded tar ball in to go directory inside the home.   The last line creates a directory named mygo as the workspace.  This directory can be used to place binaries, third party packages and your own Go source code.   You also need to set few environment variables.  Open the $HOME/.bashrc file in a text editor and enter these lines:   export GOROOT=$HOME/go export PATH=$GOROOT/bin:$PATH  export GOPATH=$HOME/mygo export PATH=$GOPATH/bin:$PATH  The first line set GOROOT environment variable pointing to $HOME/go.  This is required for proper functioning of Go tools.  You can avoid setting the GOROOT environment variable if you install Go inside /usr/local/go.   The second line append the $GOROOT/bin to the PATH environment variable.  This will help you to run go, godoc &amp; gofmt commands from command line.   The third line set the GOPATH environment variable pointing to $HOME/mygo.  The GOPATH environment variable specifies the location of your Go workspace.   The last line append $GOPATH/bin to the PATH environment variable. This will help you to run any binaries installed.   Windows Installation   There are separate installers (MSI files) available for 32 bit &amp; 64 bit versions of Windows.  The 32 bit version MSI file will be named like this: go1.x.y.windows-386.msi (Replace x.y with the current version).  Similarly for 64 bit version, the MSI file will be named like this: go1.x.y.windows-amd64.msi (Replace x.y with the current version).   You can download the installers (MSI files) from here: https://golang.org/dl/   After downloading the installer file, you can open the MSI file by double clicking on that file.  This should prompts few things about the installation of the Go compiler.  The installer place the Go related files in the C:\\Go directory.   The installer also put the C:\\Go\\bin directory in the system PATH environment variable.  You may need to restart any open command prompts for the change to take effect.   You also need to create a directory to download third party packages from github.com or similar sites.  The directory can be created at C:\\mygo like this:   mkdir C:\\mygo  After this you can set GOPATH environment variable to point to this location.  Temporarily you can set it like this:   set GOPATH=C:\\mygo  You can also append C:\\mygo\\bin into the PATH environment variable.   If you do not know how to set environment variable, just do a Google search for: “set windows environment variable”.   The GOROOT environment variable is not required here as you have installed the Go inside C:\\Go folder.  If you have changed that location during the installation, set the GOROOT pointing to the location you selected.   Running a program   This section helps you to verify your installation by running a hello world program.   As you know Go is a compiled programming language.  However, there is a command which does both compilation and running the program.  The command line syntax to run the program is like this:   go run &lt;program.go&gt;  To run a hello world program, you can copy-paste the below code to your favorite text editor and save it as hello.go:   package main  import \"fmt\"  func main() {      fmt.Println(\"Hello, World!\") }  Once you saved the above source code into a file.  You can open your command line program (bash or cmd.exe) and run the above program like this:   go run hello.go  If you are able to see the output as Hello, World!, you have successfully installed Go compiler.   Building and Running Program   As you can see above, you can run the program using go run hello.go command.  You can also build (compile) and run the binary like this in GNU/Linux:   go build hello.go ./hello  The first command produce a binary and second comand is executing that binary.  You can do the same thing in Windows like this:   go build hello.go hello.exe  The go build command produce a binary file native to the operating system and the architecture of the CPU (i386, x86_64 etc.)  ","categories": ["golang"],
        "tags": [],
        "url": "/golang/an-introduction-to-go-programming/",
        "teaser": null
      },{
        "title": "Go and Ember.js talk at GopherConIndia 2015",
        "excerpt":"I was very much excited to present at the first GopherCon India conference.  My talk was on 20th February around 3pm.      Sourcegraph team was coordinating and writing live blog and Julia Poladsky has written a blog about my talk.      I have uploaded more photos in my Google+ post      The video of the talk is available in YouTube:     ","categories": ["golang","emberjs"],
        "tags": [],
        "url": "/golang/emberjs/gopherconindia-2015-talk/",
        "teaser": null
      },{
        "title": "Golang workshops",
        "excerpt":"Recently I conducted couple of Go workshops.  The first workshop was on February 27th at NIT Calicut as part of FOSSMeet’16 program.  The second one was last Saturday (April 16th) at NUMA Bangalore organized by Hasgeek as part of Rootconf’16.   The workshop at NIT was a 4 hour workshop and particpants were computer science students from various engineering colleges.   Few photos from the workshop:             The workshop at Rootconf was attended by professionals with experience in other programming languages.  It was a 6 hour workshop and it was well received.  Here are few photos and feedback from the workshop.                  ","categories": ["golang","talk"],
        "tags": [],
        "url": "/golang/talk/golang-workshops/",
        "teaser": null
      },{
        "title": "Golang workshops at Sahrdaya & Reboot Calicut",
        "excerpt":"Those who following me or Twitter or Facebook might be already seen my updates about Golang workshops at Sahrdaya college of engineering and Reboot Calicut.   My third Golang workshop was organized by Sahrdaya college of engineering as part of the faculty development program.  Particants were mostly computer science teachers from various engineering colleges.  This was interesting, because my first Golang workshop particants were computer science engineering students and second was professional software developers.  The workshop was conducted on last week of April.  I know, this is very late update ;)   As usual, Go was very new to all particants.  The prgram went very well.  Few photos from the workshop:          The 4th Golang workshop was in Calicut.  Reboot Calicut is a new conference started in Calicut by software professionals.  Since Calicut is my home town, I was very happy to accept their invitation. I can see that, the infrastructure in Calicut is improving every year. I hope this conference will help many software developers.  The venue location was was very good.  Few photos:        ","categories": ["golang","talk"],
        "tags": [],
        "url": "/golang/talk/golang-workshop-sahrdaya-rebootcalicut/",
        "teaser": null
      },{
        "title": "Total 7 Golang workshops in 2016!",
        "excerpt":"Last update about my Golang workshops was in June 2016.  In the last 6 months many things happened in my life.  I changed my job, after working 9 years and 7 months at ZeOmega joined Red Hat.  Our second son born in last August.  Became co-organizer of Bangalore Golang user group and started organizing meetups.  Along with all these things, conducted 3 more Golang workshops.   The 5th workshop was on July 9th at BangTheTable office organized by Bangalore Golang meetup group:   Photos from today&#39;s 7 hour Go workshop at Bangalore #golang meetup. Thanks to @BangtheTable for hosting and lunch. pic.twitter.com/buqluRYNxc &mdash; Baiju Muthukadan (@baijum) July 9, 2016    The 6th workshop was at Red Hat office:   My 6th #golang workshop at #redhat #bangalore pic.twitter.com/PmNJYIWBc7 &mdash; Baiju Muthukadan (@baijum) October 1, 2016    The 7th workshop was in Trivandrum technopark organized by Prathidhwani   Today&#39;s #golang workshop was well received. Thanks to organizers and participants! pic.twitter.com/ki48h1Ymei &mdash; Baiju Muthukadan (@baijum) December 10, 2016    ","categories": ["golang","talk"],
        "tags": [],
        "url": "/golang/talk/total-7-golang-workshops/",
        "teaser": null
      },{
        "title": "Golang workshops for data scientists and students",
        "excerpt":"Last Saturday I conducted one more Go workshop in Bangalore.  The meetup was organized by Practical Data Science meetup group.  Bargava took initiative to organize this workshop.  The meetup was hosted at Red Hat Bangalore office.  Some of my colleagues, Zeeshan, Suraj D and Suraj N volunteered for the meetup.   There were 50+ participants for today&#39;s #golang workshop at @redhatindia Bangalore office! Thanks to @bargava for organizing it. pic.twitter.com/IsZFZsWGmG &mdash; Baiju Muthukadan (@baijum) May 6, 2017    I received lots of nice feedback for the workshop.  Thank you all :)   If fact, I had conducted another Go workshop last March as part of FOSSMeet’17 at NIT Calicut. It was not really a planned workshop.  It was decided just few days before the conference as one of their speaker couldn’t come.   One of the reason why I accepted the last moment invitation was the nostalgia about going back to my college.  I came to this institute in 1998 and here I am taking a selfie :)      There was an SMC hackathon lead by Balasankar and Jishnu:      I was able to spend some time with them also remembering it was 16 years before that I started SMC while studying there.  ","categories": ["golang","talk"],
        "tags": [],
        "url": "/golang/talk/golang-workshops-data-scientists-students/",
        "teaser": null
      },{
        "title": "Installing Guile 2.2 on Fedora 26 using Guix",
        "excerpt":"Few days before I upgraded to Fedora 26.  Fedora has a package named guile22 which gives 2.2 version of Guile.  But I wanted to try Guix. I noticed that there is Guix package in Copr repository. Then I enabled that repository and installed Guix.   # dnf copr enable lantw44/guix # dnf install guix   First I started the guix-daemon service and enabled it:   # systemctl start guix-daemon.service # systemctl enable guix-daemon.service   Then I tried to install Guile like this as a normal user (baiju):   $ guix package -i guile   But I had to guix pull before that:   $ guix pull   I was trying to do these things as a normal user.  But there was some error about some permission issue for a directory.  So I changed it like this:   chown baiju.baiju /var/guix/profiles/per-user/baiju   Then I tried the package installation again using the package -i subcommand.   After installation Guix showed me that I need to update my PATH. So I just updated my .bashrc like this (guix shows this after installation!):   export PATH=\"/home/baiju/.guix-profile/bin${PATH:+:}$PATH\"     When starting guile it was showing a warning like this: warning: failed to install locale   Then I found that glibc-locales package need to be installed and an environment variable need to be updated.   guix package -i glibc-locales export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale   I also added the above environment variable setting in my .bashrc.   Now I have Guile 2.2 installed using Guix in my Fedora 26!   ","categories": ["scheme","guile"],
        "tags": [],
        "url": "/scheme/guile/guile2.2-on-fedora26/",
        "teaser": null
      },{
        "title": "Golang workshops at ICEFOSS 2017, FISAT",
        "excerpt":"Today was my 10th Golang workshop. It was organized by FISAT students and staff as part of ICEFOSS 2017 annual event.  There were around 40 participants for my Go workshop.  All of them were computer science students from various engineering colleges.   Just completed my 10th #golang workshop at FISAT, Cochin. pic.twitter.com/f6Pc9JJpsv &mdash; Baiju Muthukadan (@baijum) October 7, 2017    Now I am writing this from a hotel in Angamaly.  I reched here yesterday very late night as my flight was delayed. My return flight is tomorrow early morning.  My workshop was completed around 4.30 pm. Later I came back to hotel and went for a small walk in the town.  As I was tired, I couldn’t go long.  Now I need to find something for dinner and go to bed.  ","categories": ["golang","talk"],
        "tags": [],
        "url": "/golang/talk/golang-workshops-icefoss-fisat/",
        "teaser": null
      },{
        "title": "A Comprehensive Guide to Go Programming",
        "excerpt":"This is the first time I am writing about my recent book on my blog.  It’s an introductory book on Go programming language.  Well, I started the project sometimes back around mid of 2015.  I made some progress, then self-published it through Gumroad.  I was hoping that I could make progress eventually.  Giving free updated copies of the book through Gumroad is easy.  That was the main reason I decided to use Gumroad. But that plan didn’t work out as expected.  Fortunately, not many had bought them for their disappointment.  In fact, I never tried to market the book.  I went back to writing on an off in the last few years.  I do not want to list out all the excuses for not finishing the book.   After my recent updates, now the book should be in a usable state. However, some of the chapters still need more work.  I don’t want to make big promises.  I am trying my best to refine the later chapters of the book which requires more attention.   If you would like to buy the ebook, visit the book site here: https://golang.muthukadan.net. There is also a form to receive free chapters of the book.  ","categories": ["golang","book"],
        "tags": [],
        "url": "/golang/book/a-comprehensive-guide-to-go-programming/",
        "teaser": null
      },{
        "title": "Request for Technical Review of My Go Book",
        "excerpt":"In the last blog post, I mentioned that I started working on my book about the Go programming language again.  I think now is a good time to ask for technical reviews.  So, I thought of requesting Go community members to do it for me.  This blog is about why you should review and how you can do it.  After reading this, if you are interested, please contact me via email: baiju.m.mail@gmail.com   Thanks for helping me with the technical reviewing of my book.  Your feedback and suggestions are very much valuable to me in writing this book.  I will show you how you can provide your feedback.  Before that, let’s see why you should review my book?      This book is going to help many people to learn Go programming.  As a fellow Go community member, you are contributing to this effort.   Your feedback is going to influence the content of the book.   As you study the book with a critical mind, you are enhancing your Go knowledge.  The learning is more intense than reading a book casually.   You will be required to refer other works to verify the content in the text.  This will help you to broaden your knowledge on the subject.   You are supporting a fellow Go community member.  This will motivate me to contribute more.   Bonus 1: You are getting the free PDF copy of the book.   Bonus 2: Your name will be mentioned in the book at the beginning in the acknowledgment just after the preface.   Now I want to provide some suggestions on how you can help me with the book review.  Ask these kinds of questions while you are going through the book.      How is the organization of the chapters in the book?   How is the organization of sections under each chapter?   Is the book consistent throughout all the pages?  (Consider consistency of organization, style of writing, terminology usage, etc.)   Is there any essential point missed when explaining a particular topic?   Is the logical flow of introducing the concepts easy to follow?   Is the narrative clear, reasonable, and compelling?   Are the examples and exercises short and easy to understand?   Did you notice any sentence or paragraph that is difficult to understand?   Did you see an opportunity to add a side-note which will be helpful to the reader?   Did you notice any awkward English language usage? (You can ignore minor language issues.)   How to make this book more interesting? Any thoughts?   When you send me feedback about a particular chapter, please specify the chapter title.  If the input is about a section, please include the section number and chapter title.  No need to mention the page number as it may change.   You don’t need to wait for completing the whole book to send me the review comments.  As soon as you finish one chapter or even one section, you can send the feedback.   Sometimes I may not be able to work on your feedback immediately.  But I will add it to my action items as soon as possible.  I will send you updated copies as I make progress.   Looking forward to your feedback and suggestions!  ","categories": ["golang","book"],
        "tags": [],
        "url": "/golang/book/request-for-technical-review-of-my-go-book/",
        "teaser": null
      },{
        "title": "Expectations for an introductory programming book",
        "excerpt":"After I published my last blog post requesting technical reviews of my Go book, I received quite a few responses from the Go community. Thanks to all who came forward to review the book.   Let me give some context before getting into the details of the subject of this blog post. I started working on my book around mid of 2015. However, I couldn’t continue to work on it for a long time. I had decided to self-publish my book from the beginning. I made the book available through Gumroad at a small price in PDF format. Few have bought the book so far. I usually update the book whenever I make some progress.   As I continue to work on the book, the question I ponder these days is about the expectations of a reader for an introductory programming book. I would like to hear your thoughts on the same. You can write your thoughts on your blog, comment anywhere where I share this post, or you can write to me via email: baiju@muthukadan.net   Okay, let me rephrase the question:   As a reader who is beginning with programming and software development, what are the expectations you will have when buying an introductory programming book?     Now let me share some of my observations on the topic. These are some of the things I am trying to fulfill in my book. Some of the revelations are very recent, so you will not see it reflected in the current work.      Few are expecting a realistic project unfolded throughout the book. So far I have used frivolous standalone examples everywhere in the book. Probably I can go for a hybrid approach — present one problem in the exercises section which keeps developing from the 3rd or 4th chapter and continues till the end.   Use practical compact examples. As I mentioned in the previous point, many of the current examples are silly. Using realistic examples are a hard thing to do; I do not want to lose focus when explaining a concept with details of the problem at hand.   Whenever a new feature is getting introduced, compare it with a similar feature in another programming language. I have intentionally tried to avoid any comparison, though it has crept in few places. I am still skeptical about this idea.   Focus on “why” and not the syntax. I need to do more work on this issue. I should explain why certain features exist while explaining the syntax and semantics.   The book should be available in many formats including EPUB, MOBI, PDF, and paperback. One of the challenges I am facing is typesetting the book so that it will look good in all forms.   Now it’s your turn, think about the original question and write about it! I will look forward to your thoughts on the expectations for an introductory programming book.   Book website: https://golang.muthukadan.net   Credits: The ladder picture used in the book cover and in this blog is taken from Wikimedia Commons  (By Mykl Roventine [CC BY 2.0 ], via Wikimedia Commons)  ","categories": ["golang","book"],
        "tags": [],
        "url": "/golang/book/expectations-for-an-introductory-programming-book/",
        "teaser": null
      },{
        "title": "GitHub Actions for pull requests",
        "excerpt":"GitHub Actions provides a well-integrated CI/CD system for code hosted on GitHub.  If you want to build and run tests when someone sends pull requests, you can use the pull_request event.  The pull_request event runs the workflow in a security-hardened environment due to security reasons.  For example, the encrypted secrets deposited in GitHub will not be available for the workflow.  Another restriction is that the GITHUB_TOKEN only gets read access with the pull_request event type.   If you want some write operations after the build and tests, you can use the workflow run event.  It requires some preparation from the pull_request job.  You can save the pull request number, build outputs, test results, and all other workflow data into one directory, say pr, and store it as an artifact.   Here is an example to upload the pr directory as an artifact.  It will be available as pr.zip in the workflow run for 90 days (by default):         - uses: actions/upload-artifact@v2         with:           name: pr           path: pr/   From the workflow run event, you can download the stored artifact.  You can see an example in the Keeping your GitHub Actions and workflows secure article.  Since the workflow run got write access, you can perform write operations based on the downloaded artifacts. Some of the common write operations are adding comments and labels to the pull requests.   Yet another restriction with the pull request event is manual approval required for the first-time contributors’ pull request.  The requirement for manual approval is an ongoing issue with some workarounds.   ","categories": ["github","ci"],
        "tags": [],
        "url": "/github/ci/github-actions-for-pull-requests/",
        "teaser": null
      },{
        "title": "Paketo Bindings for Spring Boot Applications",
        "excerpt":"Service Binding Specification for Kubernetes standardizes exposing backing service secrets to applications. The application should be prepared to use the bindings projected into the container.  This article explains how to use Cloud Native Buildpacks and Spring Cloud Bindings Java library to prepare a Spring Boot application to consume the bindings.   Cloud Native Buildpacks transform your application source code into OCI images that can run on any cloud.  The Paketo Spring Boot Buildpack is a Cloud Native Buildpack that helps to contribute Spring Cloud Bindings as an application dependency.   The Spring Cloud Bindings library enable automatic Spring Boot configuration based on the org.springframework.cloud.bindings.boot.enable system property. The Paketo buildpacks sets this property value to true if the bindings exists in the /platform/bindings directory at build-time.  The name of the sub-directory is considered as the name of the binding.  Within each directory, there should be a file named type with the name of the type of binding.  You can see the list of supported types in the Spring Cloud Bindings README.   For example, if you want to build the PetClinic REST server sample application with PostgreSQL backend, create a directory with a file named type like this:   mkdir /tmp/postgres echo \"postgresql\" &gt; /tmp/postgres/type   Now you can build the application image like this:   git clone https://github.com/spring-petclinic/spring-petclinic-rest cd spring-petclinic-rest pack build --path . --builder paketobuildpacks/builder:base\\ --volume /tmp/postgres:/platform/bindings/postgres spring-petclinic-rest   The Paketo Buildpacks will look for bindings in $SERVICE_BINDING_ROOT at runtime.  If an implementation of Service Binding Specification for Kubernetes project the bindings, your Spring Boot Application should connect to PostgreSQL database.   When running the abive application, set the active spring profile through an environment variable like this: SPRING_PROFILES_ACTIVE=postgres,spring-data-jpa   If you want to test the above application, create these files with valid values:   /tmp/postgres/ ├── database ├── host ├── password ├── port ├── type └── username   For testing the connectivity, you can run the container using docker:  docker run --env SERVICE_BINDING_ROOT=/bindings --env SPRING_PROFILES_ACTIVE=postgres,spring-data-jpa\\ --volume /tmp/postgres:/bindings/postgres --rm -p 9966:9966 spring-petclinic-rest:latest  ","categories": ["kubernetes","binding"],
        "tags": [],
        "url": "/kubernetes/binding/paketo-bindings-for-spring-boot-applications/",
        "teaser": null
      },{
        "title": "Why Should You Support Service Binding Specification for Kubernetes?",
        "excerpt":"Service Binding Specification for Kubernetes standardizes exposing backing service secrets to application workloads.  A backing service is any process that the application consumes over the network as part of its regular operation. Examples include datastores (such as MySQL or MongoDB), caching servers (such as Memcached), and stream processing systems (such as Kafka).  If you are a backing service provider, this article gives you all the information required to evaluate Service Binding Specification for Kubernetes.  There is an expository commentary on the spec related to backing service integration.  Finally, the article has curated a list of frequently asked questions with answers.   The spec introduction presents a good summary of the importance of the specification.  The key benefit for supporting the spec for a backing service is that the Secret resource will be collected and exposed to application workloads consistently and predictably.   Few facts about the spec:      The spec is a collective effort of a community working with Kuberentes.   Contributions from many organizations including VMware, IBM, and Red Hat.   The spec is matured and general availability release 1.0.0 came out in March 2022   The Provisioned Service part for backing service is stable and ready for adoption   Projects with Support for Service Binding   Currently the spec is getting adopted by the Kuberentes community. Here is a list of projects with support for Service Binding:      https://camel.apache.org/camel-k/latest/traits/service-binding.html   https://quarkus.io/guides/deploying-to-kubernetes#service-binding   https://paketo.io/docs/reference/configuration/#bindings   Language-specific Libraries for .NET, Go, Java, NodeJS, Python, Ruby, Rust   Operator Implementations      Service Binding Controller - Reference Implementation by the community   Red Hat implementation   VMware implementation   Provisioned Service   Provisioned Service is the key abstraction used in the spec to define a backing service.  The spec consider Provisioned Service as a duck type with a definition like this:      Any type that meets the contract defined in a specification, without being an instance of a specific concrete type. For example, for a specification that requires a given key on status, any resource that has that key on its status regardless of its apiVersion or kind would be considered to implement that duck type.    The Provisioned Service section starts like this:      A Provisioned Service resource MUST define a .status.binding field which is a LocalObjectReference-able (containing a single field name) to a Secret.    The LocalObjectReference is a type with name field.  The name should point to a Secret resource with data entries for the application to connect to the backing service.  Service Binding recociler will project the Secret values in to the application workload as defined in the Workload Projection section of the spec.  As you can see the sentence has the key word MUST in full capital and bold, that indicates this is a mandatory requirement to comform to the spec.   This is the next mandatory requirement:      The Secret MUST exist in the same namespace as the resource.    If the provisioned service and application workloads are in different namespaces, users may consider using IBM SecretShare Operator or Carvel SecretGen Controller to sync the Secret resource across namespace.   The next sentence is not a mandate, but a recommendation:      The Secret data SHOULD contain a type entry with a value that identifies the abstract classification of the binding.    This is a recommendation to the provisioned service, but when it comes to the Workload Projection, it becomes a mandatory requirement as part of the projected bindings data.  Even if the provisioned service provides a value for type, it is possible to override the value from the ServiceBinding resource.   There is no standardization on the value for type, but you can see some good examples used in the Spring Cloud Bindings. Few examples:      cassandra   couchbase   db2   elasticsearch   kafka   ldap   mongodb   mysql   neo4j   oracle   postgresql   rabbitmq   redis   sqlserver   vault   Next recommendation:      The Secret type (.type verses .data.type fields) SHOULD reflect this value as servicebinding.io/{type}, substituting {type} with the Secret data type.    This recommendation helps to query Secret resources of a particular type using field-selector.  For example:   kubectl get secrets --field-selector=\"type=servicebinding.io/postgresql\"   will give the Secret resources of postgresql type.   Next recommendation:      It is RECOMMENDED that the Secret data also contain a provider entry with a value that identifies the provider of the binding.    The provider field helps to narrow down the type further in the application. The provider field could be used where there are different providers for the same Provisioned Service type.  For example, if the type is mysql, the provider value could be mariadb, oracle, bitnami, aws-rds, etc.  When the application is reading the binding values, if necessary, the application could consider type and provider as a composite key to avoid ambiguity.   Next recommendation:      The Secret data MAY contain any other entry.    Apart from the type and provider entries, the Secret data can include username, password, host, port etc.   Next recommendation:      To facilitate discoverability, it is RECOMMENDED that a CustomResourceDefinition exposing a Provisioned Service add servicebinding.io/provisioned-service: \"true\" as a label.    This helps to find all the Provisioned Service custom resouces.  For example:   kubectl get customresourcedefinitions.apiextensions.k8s.io -l \"servicebinding.io/provisioned-service=true\"   Next there is a side note:      Note: While the Provisioned Service referenced Secret data should contain a type entry, the type must be defined as it is projected to a workload. The relaxation of the requirement for provisioned services allows for a mapping to enrich an existing secret. For example, ServiceBinding has fields to override type and provider values.    This is already discussed earlier.   Next recommendation:      Extensions and implementations MAY define additional mechanisms to consume a Provisioned Service that does not conform to the duck type.    This recommendation is added to unblock any extensions or implementations with special requirements.   Well-known Secret Entries   This is the mandatory requirement about well-known Secret entries. Though, it is acceptable not to include any of these entries in the Secret resource.      Other than the recommended type and provider entries, there are no other reserved Secret entries. In the interests of consistency, if a Secret includes any of the following entry names, the entry value MUST meet the specified requirements:    If the Provisioned Service doesn’t include any of the following entry names, no need to follow the given requirements.                           Name         Requirements                                 host         A DNS-resolvable host name or IP address                       port         A valid port number                       uri         A valid URI as defined by RFC3986                       username         A string-based username credential                       password         A string-based password credential                       certificates         A collection of PEM-encoded X.509 public certificates, representing a certificate chain used to trust TLS connections                       private-key         A PEM-encoded private key used in mTLS client authentication                  For Go based operators, you may consider using the code I wrote here to validate these entries.      Secret entries that do not meet these requirements MUST use different entry names.    If there is any entry that doesn’t follow the given requirement, you can choose different names.  For example, if there is a URI-like string but not a valid one, as per RFC-3986, use another name (e.g., “custom-uri”).   Finally, there is an example for the Secret resource:   apiVersion: v1 kind: Secret metadata:   name: production-db-secret type: servicebinding.io/mysql stringData:   type: mysql   provider: bitnami   host: localhost   port: 3306   username: root   password: root   Considerations for Role-Based Access Control (RBAC)   The spec has support for Role-Based Access Control (RBAC).  Since the service binding reconciler needs permission to read Provisioned Service resources, there is a recommendation about RBAC like this:      Cluster operators and CRD authors SHOULD opt-in resources to expose provisioned services by defining a ClusterRole with a label matching servicebinding.io/controller=true. The get, list, and watch verbs MUST be granted in the ClusterRole.    More about RBAC is given in the last section:      Kubernetes clusters often utilize Role-based access control (RBAC) to authorize subjects to perform specific actions on resources. When operating in a cluster with RBAC enabled, the service binding reconciler needs permission to read resources that provisioned a service and write resources that services are projected into. This section defines a means for third-party CRD authors and cluster operators to expose resources to the service binding reconciler. Cluster operators MAY impose additional access controls beyond RBAC.       If a service binding reconciler implementation is using Role-Based Access Control (RBAC) it MUST define an aggregated ClusterRole with a label selector matching the label servicebinding.io/controller=true. This ClusterRole MUST be bound (RoleBinding for a single namespace or ClusterRoleBinding if cluster-wide) to the subject the service binding reconciler runs as, typically a ServiceAccount.    So, there must be a ClusterRole configured in the Kubernetes cluster something like this:   apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:   name: ... aggregationRule:   clusterRoleSelectors:   - matchLabels:       servicebinding.io/controller: \"true\" rules: [] # The control plane automatically fills in the rules   As a backing service author, you can offer a ClusterRole with that same label (servicebinding.io/controller=true) and the verbs (get, list, and watch) listed in the rules.  Here is an example ClusterRole:   apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:   name: kubepostgres-service-bindings   labels:     servicebinding.io/controller: \"true\" # matches the aggregation rule selector rules: - apiGroups:   - kubepostgres.dev   resources:   - databases   - databases/status   verbs:   - get   - list   - watch   In the above example, the API group for the backing service CRD is kubepostgres.dev and the resource name (plural form) is databases.  You can change those values as per your Provisioned Service.  While your operator is getting installed, make sure the ClusterRole is also installed.  For example, if you us Helm charts, you can add the above ClusterRole configuration into a file inside the template directory (e.g., templates/rbac.yaml).   Frequently Asked Questions   Is it possible to use separate namespaces for Provisioned Services and applications?   Current spec has a strong recommendation to restrict service binding to provisioned service within the same namespace.      Restricting service binding to resources within the same namespace is strongly RECOMMENDED.    (From 2nd paragraph of Service Binding section)   If your provisioned service and applications are in different namespaces, you may consider using IBM SecretShare Operator or  Carvel SecretGen Controller to sync the Secret resource across namespace.   Is it okay to replace the Secret resource name when there is a change in any of the entries?   Yes, it is a good practice to update .status.binding.name field value with the new name of the Secret resource. After the update, remove the old Secret resource from the cluster. That should trigger Service Binding reconciliation and, in turn, update the projected bindings. This will trigger recreation of the pod. That’s the advantage of level triggering and reconciliation in Kubernetes!   Note: Changing the values in the Secret will reflect almost immediately in application workload file-system. However, most of the applications will not be designed to watch for file-system changes or even reconecting if the service connection fail. Whereas if the pod restarts, the appllicaton will get the new values and continue to work. The application may face a short downtime, if not architected properly.   Reference   The official website of the Service Binding has good documentation for Service Providers   Update 1: 2022-07-21 - add more detail Update 2: 2022-08-09 - use workload sporadically   ","categories": ["kubernetes","binding"],
        "tags": [],
        "url": "/kubernetes/binding/support-service-binding-specification-for-kubernetes/",
        "teaser": null
      }]
