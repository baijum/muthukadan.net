<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://muthukadan.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://muthukadan.net/" rel="alternate" type="text/html" /><updated>2023-05-14T20:00:47+05:30</updated><id>https://muthukadan.net/feed.xml</id><title type="html">Baiju Muthukadan</title><subtitle>For surely there is an end; and thine expectation shall not be cut off. (Proverbs 23:18)</subtitle><author><name>Baiju Muthukadan</name></author><entry><title type="html">Why Should You Support Service Binding Specification for Kubernetes?</title><link href="https://muthukadan.net/kubernetes/binding/support-service-binding-specification-for-kubernetes/" rel="alternate" type="text/html" title="Why Should You Support Service Binding Specification for Kubernetes?" /><published>2021-07-18T00:00:00+05:30</published><updated>2021-07-18T00:00:00+05:30</updated><id>https://muthukadan.net/kubernetes/binding/support-service-binding-specification-for-kubernetes</id><content type="html" xml:base="https://muthukadan.net/kubernetes/binding/support-service-binding-specification-for-kubernetes/"><![CDATA[<p><a href="https://github.com/servicebinding/spec">Service Binding Specification</a> for Kubernetes standardizes exposing
backing service secrets to application workloads.  A <em>backing service</em> is any process
that the application consumes over the network as part of its regular operation.
Examples include datastores (such as MySQL or MongoDB), caching servers (such as
Memcached), and stream processing systems (such as Kafka).  If you are a backing
service provider, this article gives you all the information required to
evaluate Service Binding Specification for Kubernetes.  There is an expository
commentary on the spec related to backing service integration.  Finally, the
article has curated a list of frequently asked questions with answers.</p>

<p>The spec <a href="https://github.com/servicebinding/spec#service-binding-specification-for-kubernetes">introduction</a> presents a good summary of the importance of
the specification.  The key benefit for supporting the spec for a backing
service is that the Secret resource will be collected and exposed to
application workloads consistently and predictably.</p>

<p>Few facts about the spec:</p>

<ul>
  <li>The spec is a collective effort of a community working with Kuberentes.</li>
  <li>Contributions from many organizations including VMware, IBM, and Red Hat.</li>
  <li>The spec is matured and general availability release 1.0.0 came out in March 2022</li>
  <li>The <a href="https://github.com/servicebinding/spec#provisioned-service">Provisioned Service</a> part for backing service is stable and ready for adoption</li>
</ul>

<h2 id="projects-with-support-for-service-binding">Projects with Support for Service Binding</h2>

<p>Currently the spec is getting adopted by the Kuberentes community. Here is a
list of projects with support for Service Binding:</p>

<ul>
  <li><a href="https://camel.apache.org/camel-k/latest/traits/service-binding.html">https://camel.apache.org/camel-k/latest/traits/service-binding.html</a></li>
  <li><a href="https://quarkus.io/guides/deploying-to-kubernetes#service-binding">https://quarkus.io/guides/deploying-to-kubernetes#service-binding</a></li>
  <li><a href="https://paketo.io/docs/reference/configuration/#bindings">https://paketo.io/docs/reference/configuration/#bindings</a></li>
  <li><a href="https://servicebinding.io/application-developer/">Language-specific Libraries for .NET, Go, Java, NodeJS, Python, Ruby, Rust</a></li>
</ul>

<h2 id="operator-implementations">Operator Implementations</h2>

<ol>
  <li><a href="https://github.com/servicebinding/service-binding-controller">Service Binding Controller</a> - Reference Implementation by the community</li>
  <li><a href="https://github.com/redhat-developer/service-binding-operator">Red Hat implementation</a></li>
  <li><a href="https://github.com/vmware-tanzu/servicebinding">VMware implementation</a></li>
</ol>

<h2 id="provisioned-service">Provisioned Service</h2>

<p><a href="https://github.com/servicebinding/spec#provisioned-service">Provisioned Service</a> is the key abstraction used in the
spec to define a backing service.  The spec consider Provisioned Service as a
duck type with a definition like this:</p>

<blockquote>
  <p>Any type that meets the contract defined in a specification, without being an
instance of a specific concrete type. For example, for a specification that
requires a given key on <code class="language-plaintext highlighter-rouge">status</code>, any resource that has that key on its
<code class="language-plaintext highlighter-rouge">status</code> regardless of its <code class="language-plaintext highlighter-rouge">apiVersion</code> or <code class="language-plaintext highlighter-rouge">kind</code> would be considered to
implement that duck type.</p>
</blockquote>

<p>The Provisioned Service section starts like this:</p>

<blockquote>
  <p>A Provisioned Service resource <strong>MUST</strong> define a <code class="language-plaintext highlighter-rouge">.status.binding</code> field which
is a <code class="language-plaintext highlighter-rouge">LocalObjectReference</code>-able (containing a single field <code class="language-plaintext highlighter-rouge">name</code>) to a
<code class="language-plaintext highlighter-rouge">Secret</code>.</p>
</blockquote>

<p>The
<a href="https://pkg.go.dev/k8s.io/api/core/v1#LocalObjectReference">LocalObjectReference</a>
is a type with <code class="language-plaintext highlighter-rouge">name</code> field.  The name should point to a Secret resource with
data entries for the application to connect to the backing service.  Service
Binding recociler will project the Secret values in to the application workload as
defined in the <a href="https://github.com/servicebinding/spec#workload-projection">Workload
Projection</a>
section of the spec.  As you can see the sentence has the key word <strong>MUST</strong> in
full capital and bold, that indicates this is a mandatory requirement to comform
to the spec.</p>

<p>This is the next mandatory requirement:</p>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">Secret</code> <strong>MUST</strong> exist in the same namespace as the resource.</p>
</blockquote>

<p>If the provisioned service and application workloads are in different namespaces, users
may consider using <a href="https://github.com/IBM/ibm-secretshare-operator">IBM SecretShare
Operator</a> or
<a href="https://github.com/vmware-tanzu/carvel-secretgen-controller">Carvel SecretGen Controller</a> to sync the Secret
resource across namespace.</p>

<p>The next sentence is not a mandate, but a recommendation:</p>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">Secret</code> data <strong>SHOULD</strong> contain a <code class="language-plaintext highlighter-rouge">type</code> entry with a value that
identifies the abstract classification of the binding.</p>
</blockquote>

<p>This is a recommendation to the provisioned service, but when it comes to the
Workload Projection, it becomes a mandatory requirement as part of the
projected bindings data.  Even if the provisioned service provides a value for
<code class="language-plaintext highlighter-rouge">type</code>, it is possible to override the value from the <code class="language-plaintext highlighter-rouge">ServiceBinding</code> resource.</p>

<p>There is no standardization on the value for <code class="language-plaintext highlighter-rouge">type</code>, but you can see some good
examples used in the <a href="https://github.com/spring-cloud/spring-cloud-bindings#auto-configurations">Spring Cloud
Bindings</a>.
Few examples:</p>

<ul>
  <li>cassandra</li>
  <li>couchbase</li>
  <li>db2</li>
  <li>elasticsearch</li>
  <li>kafka</li>
  <li>ldap</li>
  <li>mongodb</li>
  <li>mysql</li>
  <li>neo4j</li>
  <li>oracle</li>
  <li>postgresql</li>
  <li>rabbitmq</li>
  <li>redis</li>
  <li>sqlserver</li>
  <li>vault</li>
</ul>

<p>Next recommendation:</p>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">Secret</code> type (<code class="language-plaintext highlighter-rouge">.type</code> verses <code class="language-plaintext highlighter-rouge">.data.type</code> fields) <strong>SHOULD</strong> reflect this
value as <code class="language-plaintext highlighter-rouge">servicebinding.io/{type}</code>, substituting <code class="language-plaintext highlighter-rouge">{type}</code> with the <code class="language-plaintext highlighter-rouge">Secret</code>
data type.</p>
</blockquote>

<p>This recommendation helps to query Secret resources of a particular type using
field-selector.  For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get secrets --field-selector="type=servicebinding.io/postgresql"
</code></pre></div></div>

<p>will give the Secret resources of <code class="language-plaintext highlighter-rouge">postgresql</code> type.</p>

<p>Next recommendation:</p>

<blockquote>
  <p>It is <strong>RECOMMENDED</strong> that the <code class="language-plaintext highlighter-rouge">Secret</code> data also contain a <code class="language-plaintext highlighter-rouge">provider</code> entry
with a value that identifies the provider of the binding.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">provider</code> field helps to narrow down the type further in the application.
The provider field could be used where there are different providers for the
same Provisioned Service type.  For example, if the type is <code class="language-plaintext highlighter-rouge">mysql</code>, the
provider value could be <code class="language-plaintext highlighter-rouge">mariadb</code>, <code class="language-plaintext highlighter-rouge">oracle</code>, <code class="language-plaintext highlighter-rouge">bitnami</code>, <code class="language-plaintext highlighter-rouge">aws-rds</code>, etc.  When
the application is reading the binding values, if necessary, the application
could consider <code class="language-plaintext highlighter-rouge">type</code> and <code class="language-plaintext highlighter-rouge">provider</code> as a composite key to avoid ambiguity.</p>

<p>Next recommendation:</p>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">Secret</code> data <strong>MAY</strong> contain any other entry.</p>
</blockquote>

<p>Apart from the <code class="language-plaintext highlighter-rouge">type</code> and <code class="language-plaintext highlighter-rouge">provider</code> entries, the Secret data can include
<code class="language-plaintext highlighter-rouge">username</code>, <code class="language-plaintext highlighter-rouge">password</code>, <code class="language-plaintext highlighter-rouge">host</code>, <code class="language-plaintext highlighter-rouge">port</code> etc.</p>

<p>Next recommendation:</p>

<blockquote>
  <p>To facilitate discoverability, it is <strong>RECOMMENDED</strong> that a
<code class="language-plaintext highlighter-rouge">CustomResourceDefinition</code> exposing a Provisioned Service add
<code class="language-plaintext highlighter-rouge">servicebinding.io/provisioned-service: "true"</code> as a label.</p>
</blockquote>

<p>This helps to find all the Provisioned Service custom resouces.  For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get customresourcedefinitions.apiextensions.k8s.io -l "servicebinding.io/provisioned-service=true"
</code></pre></div></div>

<p>Next there is a side note:</p>

<blockquote>
  <p>Note: While the Provisioned Service referenced <code class="language-plaintext highlighter-rouge">Secret</code> data should contain a
<code class="language-plaintext highlighter-rouge">type</code> entry, the <code class="language-plaintext highlighter-rouge">type</code> must be defined as it is projected to a workload. The
relaxation of the requirement for provisioned services allows for a mapping to
enrich an existing secret. For example, <code class="language-plaintext highlighter-rouge">ServiceBinding</code> has fields to
override <code class="language-plaintext highlighter-rouge">type</code> and <code class="language-plaintext highlighter-rouge">provider</code> values.</p>
</blockquote>

<p>This is already discussed earlier.</p>

<p>Next recommendation:</p>

<blockquote>
  <p>Extensions and implementations <strong>MAY</strong> define additional mechanisms to consume
a Provisioned Service that does not conform to the duck type.</p>
</blockquote>

<p>This recommendation is added to unblock any extensions or implementations with
special requirements.</p>

<h3 id="well-known-secret-entries">Well-known Secret Entries</h3>

<p>This is the mandatory requirement about <a href="https://github.com/servicebinding/spec#well-known-secret-entries">well-known Secret
entries</a>.
Though, it is acceptable not to include any of these entries in the Secret
resource.</p>

<blockquote>
  <p>Other than the recommended <code class="language-plaintext highlighter-rouge">type</code> and <code class="language-plaintext highlighter-rouge">provider</code> entries, there are no other
reserved <code class="language-plaintext highlighter-rouge">Secret</code> entries. In the interests of consistency, if a <code class="language-plaintext highlighter-rouge">Secret</code>
includes any of the following entry names, the entry value <strong>MUST</strong> meet the
specified requirements:</p>
</blockquote>

<p>If the Provisioned Service doesn’t include any of the following entry names, no
need to follow the given requirements.</p>

<blockquote>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Requirements</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">host</code></td>
        <td>A DNS-resolvable host name or IP address</td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">port</code></td>
        <td>A valid port number</td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">uri</code></td>
        <td>A valid URI as defined by <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a></td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">username</code></td>
        <td>A string-based username credential</td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">password</code></td>
        <td>A string-based password credential</td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">certificates</code></td>
        <td>A collection of PEM-encoded X.509 public certificates, representing a certificate chain used to trust TLS connections</td>
      </tr>
      <tr>
        <td><code class="language-plaintext highlighter-rouge">private-key</code></td>
        <td>A PEM-encoded private key used in mTLS client authentication</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<p>For Go based operators, you may consider using <a href="https://gist.github.com/baijum/76c443f8be1c0528c0dcc0818df6dfa2">the code I wrote
here</a> to
validate these entries.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Secret</code> entries that do not meet these requirements <strong>MUST</strong> use different entry names.</p>
</blockquote>

<p>If there is any entry that doesn’t follow the given requirement, you can choose
different names.  For example, if there is a URI-like string but not a valid
one, as per RFC-3986, use another name (e.g., “custom-uri”).</p>

<p>Finally, there is an example for the Secret resource:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">production-db-secret</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">servicebinding.io/mysql</span>
<span class="na">stringData</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">mysql</span>
  <span class="na">provider</span><span class="pi">:</span> <span class="s">bitnami</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">3306</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">root</span>
</code></pre></div></div>

<h3 id="considerations-for-role-based-access-control-rbac">Considerations for Role-Based Access Control (RBAC)</h3>

<p>The spec has support for Role-Based Access Control (RBAC).  Since the service
binding reconciler needs permission to read Provisioned Service resources, there
is a recommendation about <a href="https://github.com/servicebinding/spec#role-based-access-control-rbac">RBAC</a> like this:</p>

<blockquote>
  <p>Cluster operators and CRD authors <strong>SHOULD</strong> opt-in resources to expose
provisioned services by defining a <code class="language-plaintext highlighter-rouge">ClusterRole</code> with a label matching
<code class="language-plaintext highlighter-rouge">servicebinding.io/controller=true</code>. The <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">list</code>, and <code class="language-plaintext highlighter-rouge">watch</code> verbs
<strong>MUST</strong> be granted in the <code class="language-plaintext highlighter-rouge">ClusterRole</code>.</p>
</blockquote>

<p>More about RBAC is given in the last section:</p>

<blockquote>
  <p>Kubernetes clusters often utilize <a href="https://github.com/servicebinding/spec#role-based-access-control-rbac">Role-based access control (RBAC)</a> to
authorize subjects to perform specific actions on resources. When operating in
a cluster with RBAC enabled, the service binding reconciler needs permission
to read resources that provisioned a service and write resources that services
are projected into. This section defines a means for third-party CRD authors
and cluster operators to expose resources to the service binding reconciler.
Cluster operators <strong>MAY</strong> impose additional access controls beyond RBAC.</p>
</blockquote>

<blockquote>
  <p>If a service binding reconciler implementation is using Role-Based Access
Control (RBAC) it <strong>MUST</strong> define an <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles">aggregated <code class="language-plaintext highlighter-rouge">ClusterRole</code></a> with a
label selector matching the label <code class="language-plaintext highlighter-rouge">servicebinding.io/controller=true</code>. This
<code class="language-plaintext highlighter-rouge">ClusterRole</code> <strong>MUST</strong> be bound (<code class="language-plaintext highlighter-rouge">RoleBinding</code> for a single namespace or
<code class="language-plaintext highlighter-rouge">ClusterRoleBinding</code> if cluster-wide) to the subject the service binding
reconciler runs as, typically a <code class="language-plaintext highlighter-rouge">ServiceAccount</code>.</p>
</blockquote>

<p>So, there must be a <code class="language-plaintext highlighter-rouge">ClusterRole</code> configured in the Kubernetes cluster something
like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">...</span>
<span class="na">aggregationRule</span><span class="pi">:</span>
  <span class="na">clusterRoleSelectors</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">servicebinding.io/controller</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
<span class="na">rules</span><span class="pi">:</span> <span class="pi">[]</span> <span class="c1"># The control plane automatically fills in the rules</span>
</code></pre></div></div>

<p>As a backing service author, you can offer a <code class="language-plaintext highlighter-rouge">ClusterRole</code> with that same label
(<code class="language-plaintext highlighter-rouge">servicebinding.io/controller=true</code>) and the verbs (<code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">list</code>, and <code class="language-plaintext highlighter-rouge">watch</code>)
listed in the rules.  Here is an example <code class="language-plaintext highlighter-rouge">ClusterRole</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kubepostgres-service-bindings</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">servicebinding.io/controller</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span> <span class="c1"># matches the aggregation rule selector</span>
<span class="na">rules</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">kubepostgres.dev</span>
  <span class="na">resources</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">databases</span>
  <span class="pi">-</span> <span class="s">databases/status</span>
  <span class="na">verbs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">get</span>
  <span class="pi">-</span> <span class="s">list</span>
  <span class="pi">-</span> <span class="s">watch</span>
</code></pre></div></div>

<p>In the above example, the API group for the backing service CRD is
<code class="language-plaintext highlighter-rouge">kubepostgres.dev</code> and the resource name (plural form) is <code class="language-plaintext highlighter-rouge">databases</code>.  You can
change those values as per your Provisioned Service.  While your operator is
getting installed, make sure the ClusterRole is also installed.  For example,
if you us Helm charts, you can add the above <code class="language-plaintext highlighter-rouge">ClusterRole</code> configuration into a
file inside the template directory (e.g., <code class="language-plaintext highlighter-rouge">templates/rbac.yaml</code>).</p>

<h2 id="frequently-asked-questions">Frequently Asked Questions</h2>

<h3 id="is-it-possible-to-use-separate-namespaces-for-provisioned-services-and-applications">Is it possible to use separate namespaces for Provisioned Services and applications?</h3>

<p>Current spec has a strong recommendation to restrict service binding to
provisioned service within the same namespace.</p>

<blockquote>
  <p>Restricting service binding to resources within the same namespace is strongly <strong>RECOMMENDED</strong>.</p>
</blockquote>

<p>(<em>From <a href="https://github.com/servicebinding/spec#service-binding">2nd
paragraph</a> of
Service Binding section</em>)</p>

<p>If your provisioned service and applications are in different namespaces, you
may consider using <a href="https://github.com/IBM/ibm-secretshare-operator">IBM SecretShare
Operator</a> or 
<a href="https://github.com/vmware-tanzu/carvel-secretgen-controller">Carvel SecretGen Controller</a>
to sync the Secret resource across namespace.</p>

<h3 id="is-it-okay-to-replace-the-secret-resource-name-when-there-is-a-change-in-any-of-the-entries">Is it okay to replace the Secret resource name when there is a change in any of the entries?</h3>

<p>Yes, it is a good practice to update <code class="language-plaintext highlighter-rouge">.status.binding.name</code> field value with the
new name of the Secret resource. After the update, remove the old Secret
resource from the cluster. That should trigger Service Binding reconciliation
and, in turn, update the projected bindings. This will trigger recreation of the
pod. That’s the advantage of <a href="https://hackernoon.com/level-triggering-and-reconciliation-in-kubernetes-1f17fe30333d">level triggering and reconciliation</a> in Kubernetes!</p>

<p>Note: Changing the values in the Secret will reflect almost immediately in
application workload file-system. However, most of the applications will not be
designed to watch for file-system changes or even reconecting if the service
connection fail. Whereas if the pod restarts, the appllicaton will get the new
values and continue to work. The application may face a short downtime, if
not architected properly.</p>

<h2 id="reference">Reference</h2>

<p>The official website of the Service Binding has good <a href="https://servicebinding.io/service-provider/">documentation for Service
Providers</a></p>

<p><strong>Update 1:</strong> 2022-07-21 - add more detail
<strong>Update 2:</strong> 2022-08-09 - use workload sporadically</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="kubernetes" /><category term="binding" /><summary type="html"><![CDATA[Service Binding Specification for Kubernetes standardizes exposing backing service secrets to application workloads. A backing service is any process that the application consumes over the network as part of its regular operation. Examples include datastores (such as MySQL or MongoDB), caching servers (such as Memcached), and stream processing systems (such as Kafka). If you are a backing service provider, this article gives you all the information required to evaluate Service Binding Specification for Kubernetes. There is an expository commentary on the spec related to backing service integration. Finally, the article has curated a list of frequently asked questions with answers.]]></summary></entry><entry><title type="html">Paketo Bindings for Spring Boot Applications</title><link href="https://muthukadan.net/kubernetes/binding/paketo-bindings-for-spring-boot-applications/" rel="alternate" type="text/html" title="Paketo Bindings for Spring Boot Applications" /><published>2021-07-07T00:00:00+05:30</published><updated>2021-07-07T00:00:00+05:30</updated><id>https://muthukadan.net/kubernetes/binding/paketo-bindings-for-spring-boot-applications</id><content type="html" xml:base="https://muthukadan.net/kubernetes/binding/paketo-bindings-for-spring-boot-applications/"><![CDATA[<p><a href="https://github.com/k8s-service-bindings/spec">Service Binding Specification</a>
for Kubernetes standardizes exposing backing service secrets to applications.
The application should be prepared to use the bindings projected into the
container.  This article explains how to use <a href="https://buildpacks.io">Cloud Native
Buildpacks</a> and <a href="https://github.com/spring-cloud/spring-cloud-bindings">Spring Cloud
Bindings</a> Java library to
prepare a <em>Spring Boot</em> application to consume the bindings.</p>

<p><em>Cloud Native Buildpacks</em> transform your application source code into <a href="https://github.com/opencontainers/image-spec/blob/master/spec.md">OCI
images</a> that
can run on any cloud.  The <a href="https://github.com/paketo-buildpacks/spring-boot">Paketo Spring Boot
Buildpack</a> is a <em>Cloud Native
Buildpack</em> that helps to contribute <em>Spring Cloud Bindings</em> as an application
dependency.</p>

<p>The <em>Spring Cloud Bindings</em> library enable automatic <em>Spring Boot</em> configuration
based on the <code class="language-plaintext highlighter-rouge">org.springframework.cloud.bindings.boot.enable</code> system property.
The <a href="https://paketo.io/docs/reference/configuration/#bindings">Paketo
buildpacks</a> sets this
property value to <code class="language-plaintext highlighter-rouge">true</code> if the bindings exists in the <code class="language-plaintext highlighter-rouge">/platform/bindings</code>
directory at build-time.  The name of the sub-directory is considered as the
name of the binding.  Within each directory, there should be a file named <code class="language-plaintext highlighter-rouge">type</code>
with the name of the type of binding.  You can see the list of supported types
in the <a href="https://github.com/spring-cloud/spring-cloud-bindings#auto-configurations">Spring Cloud Bindings
README</a>.</p>

<p>For example, if you want to build the <a href="https://github.com/spring-petclinic/spring-petclinic-rest">PetClinic REST
server</a> sample
application with PostgreSQL backend, create a directory with a file named <code class="language-plaintext highlighter-rouge">type</code>
like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir /tmp/postgres
echo "postgresql" &gt; /tmp/postgres/type
</code></pre></div></div>

<p>Now you can build the application image like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/spring-petclinic/spring-petclinic-rest
cd spring-petclinic-rest
pack build --path . --builder paketobuildpacks/builder:base\
--volume /tmp/postgres:/platform/bindings/postgres spring-petclinic-rest
</code></pre></div></div>

<p>The Paketo Buildpacks will look for bindings in <code class="language-plaintext highlighter-rouge">$SERVICE_BINDING_ROOT</code> at
runtime.  If an implementation of <a href="https://github.com/k8s-service-bindings/spec">Service Binding
Specification</a> for Kubernetes
project the bindings, your Spring Boot Application should connect to PostgreSQL
database.</p>

<p>When running the abive application, set the active spring profile through an
environment variable like this: <code class="language-plaintext highlighter-rouge">SPRING_PROFILES_ACTIVE=postgres,spring-data-jpa</code></p>

<p>If you want to test the above application, create these files with valid values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/tmp/postgres/
├── database
├── host
├── password
├── port
├── type
└── username
</code></pre></div></div>

<p>For testing the connectivity, you can run the container using docker:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --env SERVICE_BINDING_ROOT=/bindings --env SPRING_PROFILES_ACTIVE=postgres,spring-data-jpa\
--volume /tmp/postgres:/bindings/postgres --rm -p 9966:9966 spring-petclinic-rest:latest
</code></pre></div></div>]]></content><author><name>Baiju Muthukadan</name></author><category term="kubernetes" /><category term="binding" /><summary type="html"><![CDATA[Service Binding Specification for Kubernetes standardizes exposing backing service secrets to applications. The application should be prepared to use the bindings projected into the container. This article explains how to use Cloud Native Buildpacks and Spring Cloud Bindings Java library to prepare a Spring Boot application to consume the bindings.]]></summary></entry><entry><title type="html">GitHub Actions for pull requests</title><link href="https://muthukadan.net/github/ci/github-actions-for-pull-requests/" rel="alternate" type="text/html" title="GitHub Actions for pull requests" /><published>2021-05-30T00:00:00+05:30</published><updated>2021-05-30T00:00:00+05:30</updated><id>https://muthukadan.net/github/ci/github-actions-for-pull-requests</id><content type="html" xml:base="https://muthukadan.net/github/ci/github-actions-for-pull-requests/"><![CDATA[<p>GitHub Actions provides a well-integrated CI/CD system for code hosted on
GitHub.  If you want to build and run tests when someone sends pull requests,
you can use the <a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request">pull_request event</a>.  The <code class="language-plaintext highlighter-rouge">pull_request</code>
event runs the workflow in a security-hardened environment due to <a href="https://securitylab.github.com/research/github-actions-preventing-pwn-requests/">security
reasons</a>.  For example, the <a href="https://docs.github.com/en/actions/reference/encrypted-secrets">encrypted
secrets</a> deposited in GitHub will not be available for the
workflow.  Another restriction is that the <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> <a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#permissions-for-the-github_token">only gets read
access</a> with the pull_request event type.</p>

<p>If you want some write operations after the build and tests, you can use the
<a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run">workflow run event</a>.  It requires some preparation from the
<code class="language-plaintext highlighter-rouge">pull_request</code> job.  You can save the pull request number, build outputs, test
results, and all other workflow data into one directory, say <code class="language-plaintext highlighter-rouge">pr</code>, and <a href="https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts">store it
as an artifact</a>.</p>

<p>Here is an example to upload the <code class="language-plaintext highlighter-rouge">pr</code> directory as an artifact.  It will be
available as <code class="language-plaintext highlighter-rouge">pr.zip</code> in the workflow run for 90 days (by default):</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-artifact@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">pr</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">pr/</span>
</code></pre></div></div>

<p>From the <a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run">workflow run event</a>, you can download the stored
artifact.  You can see an example in the <a href="https://securitylab.github.com/research/github-actions-preventing-pwn-requests/">Keeping your GitHub Actions and
workflows secure</a> article.  Since the workflow run got write
access, you can perform write operations based on the downloaded artifacts.
Some of the common write operations are adding comments and labels to the pull
requests.</p>

<p>Yet another restriction with the pull request event is <a href="https://github.blog/2021-04-22-github-actions-update-helping-maintainers-combat-bad-actors/">manual
approval</a> required for the first-time contributors’ pull
request.  The requirement for manual approval is an ongoing <a href="https://github.community/t/how-to-auto-approve-workflow-runs-for-first-time-contributors/176436">issue with some
workarounds</a>.</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="github" /><category term="ci" /><summary type="html"><![CDATA[GitHub Actions provides a well-integrated CI/CD system for code hosted on GitHub. If you want to build and run tests when someone sends pull requests, you can use the pull_request event. The pull_request event runs the workflow in a security-hardened environment due to security reasons. For example, the encrypted secrets deposited in GitHub will not be available for the workflow. Another restriction is that the GITHUB_TOKEN only gets read access with the pull_request event type.]]></summary></entry><entry><title type="html">Expectations for an introductory programming book</title><link href="https://muthukadan.net/golang/book/expectations-for-an-introductory-programming-book/" rel="alternate" type="text/html" title="Expectations for an introductory programming book" /><published>2018-11-19T00:00:00+05:30</published><updated>2018-11-19T00:00:00+05:30</updated><id>https://muthukadan.net/golang/book/expectations-for-an-introductory-programming-book</id><content type="html" xml:base="https://muthukadan.net/golang/book/expectations-for-an-introductory-programming-book/"><![CDATA[<p>After I published my <a href="https://medium.com/@baijum/request-for-technical-review-970c6685cf5e">last blog post requesting technical
reviews</a>
of my Go book, I received quite a few responses from
the Go community. Thanks to all who came forward to review the book.</p>

<p>Let me give some context before getting into the details of the subject
of this blog post. I started working on my book around mid of 2015.
However, I couldn’t continue to work on it for a long time. I had
decided to self-publish my book from the beginning. I made the <a href="https://gumroad.com/l/gobook">book
available through Gumroad</a>
at a small price in PDF format. Few have bought the
book so far. I usually update the book whenever I make some progress.</p>

<p>As I continue to work on the book, the question I ponder these days is
about the expectations of a reader for an introductory programming book.
I would like to hear your thoughts on the same. You can write your
thoughts on your blog, comment anywhere where I share this post, or you
can write to me via email: <a href="mailto:baiju@muthukadan.net">baiju@muthukadan.net</a></p>

<p>Okay, let me rephrase the question:</p>

<p><strong><em>As a reader who is beginning with programming and software
development, what are the expectations you will have when buying an
introductory programming book?</em></strong></p>

<hr />

<p>Now let me share some of my observations on the topic. These are some of
the things I am trying to fulfill in my book. Some of the revelations
are very recent, so you will not see it reflected in the current work.</p>

<ol>
  <li><strong>Few are expecting a realistic project unfolded throughout the
book.</strong> So far I have used frivolous standalone examples everywhere
in the book. Probably I can go for a hybrid approach — present one
problem in the exercises section which keeps developing from the 3rd
or 4th chapter and continues till the end.</li>
  <li><strong>Use practical compact examples.</strong> As I mentioned in the previous
point, many of the current examples are silly. Using realistic
examples are a hard thing to do; I do not want to lose focus when
explaining a concept with details of the problem at hand.</li>
  <li><strong>Whenever a new feature is getting introduced, compare it with a
similar feature in another programming language.</strong> I have
intentionally tried to avoid any comparison, though it has crept in
few places. I am still skeptical about this idea.</li>
  <li><strong>Focus on “why” and not the syntax.</strong> I need to do more work on
this issue. I should explain why certain features exist while
explaining the syntax and semantics.</li>
  <li><strong>The book should be available in many formats including EPUB,
MOBI, PDF, and paperback.</strong> One of the challenges I am facing is
typesetting the book so that it will look good in all forms.</li>
</ol>

<p>Now it’s your turn, think about the original question and write about
it! I will look forward to your thoughts on the expectations for an
introductory programming book.</p>

<p>Book website:
<a href="https://golang.muthukadan.net/">https://golang.muthukadan.net</a></p>

<p><em>Credits: The ladder picture used in the book cover and in this blog is
taken from</em> <a href="https://commons.wikimedia.org/wiki/File:The_ladder_of_life_is_full_of_splinters.jpg"><em>Wikimedia
Commons</em></a>
 <em>(By Mykl Roventine [</em><a href="https://creativecommons.org/licenses/by/2.0/"><em>CC BY 2.0</em></a> <em>], via Wikimedia Commons)</em></p>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="book" /><summary type="html"><![CDATA[After I published my last blog post requesting technical reviews of my Go book, I received quite a few responses from the Go community. Thanks to all who came forward to review the book.]]></summary></entry><entry><title type="html">Request for Technical Review of My Go Book</title><link href="https://muthukadan.net/golang/book/request-for-technical-review-of-my-go-book/" rel="alternate" type="text/html" title="Request for Technical Review of My Go Book" /><published>2018-11-07T00:00:00+05:30</published><updated>2018-11-07T00:00:00+05:30</updated><id>https://muthukadan.net/golang/book/request-for-technical-review-of-my-go-book</id><content type="html" xml:base="https://muthukadan.net/golang/book/request-for-technical-review-of-my-go-book/"><![CDATA[<p>In the last blog post, I mentioned that I started working on my book
about the Go programming language again.  I think now is a good time
to ask for technical reviews.  So, I thought of requesting Go
community members to do it for me.  This blog is about why you should
review and how you can do it.  After reading this, if you are
interested, please contact me via email: baiju.m.mail@gmail.com</p>

<p>Thanks for helping me with the technical reviewing of my book.  Your
feedback and suggestions are very much valuable to me in writing this
book.  I will show you how you can provide your feedback.  Before
that, let’s see why you should review my book?</p>

<ol>
  <li>This book is going to help many people to learn Go programming.  As
a fellow Go community member, you are contributing to this effort.</li>
  <li>Your feedback is going to influence the content of the book.</li>
  <li>As you study the book with a critical mind, you are enhancing your
Go knowledge.  The learning is more intense than reading a book
casually.</li>
  <li>You will be required to refer other works to verify the content in
the text.  This will help you to broaden your knowledge on the
subject.</li>
  <li>You are supporting a fellow Go community member.  This will
motivate me to contribute more.</li>
</ol>

<p>Bonus 1: You are getting the free PDF copy of the book.</p>

<p>Bonus 2: Your name will be mentioned in the book at the beginning in
the acknowledgment just after the preface.</p>

<p>Now I want to provide some suggestions on how you can help me with the
book review.  Ask these kinds of questions while you are going through
the book.</p>

<ol>
  <li>How is the organization of the chapters in the book?</li>
  <li>How is the organization of sections under each chapter?</li>
  <li>Is the book consistent throughout all the pages?  (Consider
consistency of organization, style of writing, terminology usage,
etc.)</li>
  <li>Is there any essential point missed when explaining a particular
topic?</li>
  <li>Is the logical flow of introducing the concepts easy to follow?</li>
  <li>Is the narrative clear, reasonable, and compelling?</li>
  <li>Are the examples and exercises short and easy to understand?</li>
  <li>Did you notice any sentence or paragraph that is difficult to
understand?</li>
  <li>Did you see an opportunity to add a side-note which will be helpful
to the reader?</li>
  <li>Did you notice any awkward English language usage? (You can ignore
minor language issues.)</li>
  <li>How to make this book more interesting? Any thoughts?</li>
</ol>

<p>When you send me feedback about a particular chapter, please specify
the chapter title.  If the input is about a section, please include
the section number and chapter title.  No need to mention the page
number as it may change.</p>

<p>You don’t need to wait for completing the whole book to send me the
review comments.  As soon as you finish one chapter or even one
section, you can send the feedback.</p>

<p>Sometimes I may not be able to work on your feedback immediately.  But
I will add it to my action items as soon as possible.  I will send you
updated copies as I make progress.</p>

<p>Looking forward to your feedback and suggestions!</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="book" /><summary type="html"><![CDATA[In the last blog post, I mentioned that I started working on my book about the Go programming language again. I think now is a good time to ask for technical reviews. So, I thought of requesting Go community members to do it for me. This blog is about why you should review and how you can do it. After reading this, if you are interested, please contact me via email: baiju.m.mail@gmail.com]]></summary></entry><entry><title type="html">A Comprehensive Guide to Go Programming</title><link href="https://muthukadan.net/golang/book/a-comprehensive-guide-to-go-programming/" rel="alternate" type="text/html" title="A Comprehensive Guide to Go Programming" /><published>2018-09-29T00:00:00+05:30</published><updated>2018-09-29T00:00:00+05:30</updated><id>https://muthukadan.net/golang/book/a-comprehensive-guide-to-go-programming</id><content type="html" xml:base="https://muthukadan.net/golang/book/a-comprehensive-guide-to-go-programming/"><![CDATA[<p>This is the first time I am writing about my <a href="https://golang.muthukadan.net">recent
book</a> on my blog.  It’s an introductory
book on Go programming language.  Well, I started the project
sometimes back around mid of 2015.  I made some progress, then
self-published it through Gumroad.  I was hoping that I could make
progress eventually.  Giving free updated copies of the book through
Gumroad is easy.  That was the main reason I decided to use Gumroad.
But that plan didn’t work out as expected.  Fortunately, not many had
bought them for their disappointment.  In fact, I never tried to
market the book.  I went back to writing on an off in the last few
years.  I do not want to list out all the excuses for not finishing
the book.</p>

<p>After my recent updates, now the book should be in a usable state.
However, some of the chapters still need more work.  I don’t want to
make big promises.  I am trying my best to refine the later chapters
of the book which requires more attention.</p>

<p>If you would like to buy the ebook, visit the book site here:
<a href="https://golang.muthukadan.net">https://golang.muthukadan.net</a>. There
is also a form to receive free chapters of the book.</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="book" /><summary type="html"><![CDATA[This is the first time I am writing about my recent book on my blog. It’s an introductory book on Go programming language. Well, I started the project sometimes back around mid of 2015. I made some progress, then self-published it through Gumroad. I was hoping that I could make progress eventually. Giving free updated copies of the book through Gumroad is easy. That was the main reason I decided to use Gumroad. But that plan didn’t work out as expected. Fortunately, not many had bought them for their disappointment. In fact, I never tried to market the book. I went back to writing on an off in the last few years. I do not want to list out all the excuses for not finishing the book.]]></summary></entry><entry><title type="html">Golang workshops at ICEFOSS 2017, FISAT</title><link href="https://muthukadan.net/golang/talk/golang-workshops-icefoss-fisat/" rel="alternate" type="text/html" title="Golang workshops at ICEFOSS 2017, FISAT" /><published>2017-10-07T00:00:00+05:30</published><updated>2017-10-07T00:00:00+05:30</updated><id>https://muthukadan.net/golang/talk/golang-workshops-icefoss-fisat</id><content type="html" xml:base="https://muthukadan.net/golang/talk/golang-workshops-icefoss-fisat/"><![CDATA[<p>Today was my 10th Golang workshop. It was organized by FISAT students
and staff as part of <a href="http://archive.is/sB3yS">ICEFOSS 2017 annual
event</a>.  There were around 40 participants
for my Go workshop.  All of them were computer science students from
various engineering colleges.</p>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Just completed my 10th <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> workshop at FISAT, Cochin. <a href="https://t.co/f6Pc9JJpsv">pic.twitter.com/f6Pc9JJpsv</a></p>&mdash; Baiju Muthukadan (@baijum) <a href="https://twitter.com/baijum/status/916628503834980353?ref_src=twsrc%5Etfw">October 7, 2017</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<p>Now I am writing this from a hotel in Angamaly.  I reched here
yesterday very late night as my flight was delayed. My return flight
is tomorrow early morning.  My workshop was completed around 4.30 pm.
Later I came back to hotel and went for a small walk in the town.  As
I was tired, I couldn’t go long.  Now I need to find something for
dinner and go to bed.</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="talk" /><summary type="html"><![CDATA[Today was my 10th Golang workshop. It was organized by FISAT students and staff as part of ICEFOSS 2017 annual event. There were around 40 participants for my Go workshop. All of them were computer science students from various engineering colleges.]]></summary></entry><entry><title type="html">Installing Guile 2.2 on Fedora 26 using Guix</title><link href="https://muthukadan.net/scheme/guile/guile2.2-on-fedora26/" rel="alternate" type="text/html" title="Installing Guile 2.2 on Fedora 26 using Guix" /><published>2017-07-15T00:00:00+05:30</published><updated>2017-07-15T00:00:00+05:30</updated><id>https://muthukadan.net/scheme/guile/guile2.2-on-fedora26</id><content type="html" xml:base="https://muthukadan.net/scheme/guile/guile2.2-on-fedora26/"><![CDATA[<p>Few days before I upgraded to Fedora 26.  Fedora has a package named
<code class="language-plaintext highlighter-rouge">guile22</code> which gives 2.2 version of Guile.  But I wanted to try Guix.
I noticed that there is <a href="https://copr.fedorainfracloud.org/coprs/lantw44/guix/">Guix package</a> in Copr repository.
Then I enabled that repository and installed Guix.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># dnf copr enable lantw44/guix</span>
<span class="c"># dnf install guix</span>
</code></pre></div></div>

<p>First I started the guix-daemon service and enabled it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># systemctl start guix-daemon.service</span>
<span class="c"># systemctl enable guix-daemon.service</span>
</code></pre></div></div>

<p>Then I tried to install Guile like this as a normal user (<code class="language-plaintext highlighter-rouge">baiju</code>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>guix package <span class="nt">-i</span> guile
</code></pre></div></div>

<p>But I had to guix pull before that:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>guix pull
</code></pre></div></div>

<p>I was trying to do these things as a normal user.  But there was some
error about some permission issue for a directory.  So I changed it
like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chown </span>baiju.baiju /var/guix/profiles/per-user/baiju
</code></pre></div></div>

<p>Then I tried the package installation again using the <code class="language-plaintext highlighter-rouge">package -i</code>
subcommand.</p>

<p>After installation Guix showed me that I need to update my PATH.
So I just updated my <code class="language-plaintext highlighter-rouge">.bashrc</code> like this (guix shows this after installation!):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/home/baiju/.guix-profile/bin</span><span class="k">${</span><span class="nv">PATH</span>:+:<span class="k">}</span><span class="nv">$PATH</span><span class="s2">"</span>  
</code></pre></div></div>

<p>When starting guile it was showing a warning like this: <code class="language-plaintext highlighter-rouge">warning:
failed to install locale</code></p>

<p>Then I found that <a href="https://www.gnu.org/software/guix/manual/guix.html#Application-Setup">glibc-locales package</a> need to be installed
and an environment variable need to be updated.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guix package <span class="nt">-i</span> glibc-locales
<span class="nb">export </span><span class="nv">GUIX_LOCPATH</span><span class="o">=</span><span class="nv">$HOME</span>/.guix-profile/lib/locale
</code></pre></div></div>

<p>I also added the above environment variable setting in my <code class="language-plaintext highlighter-rouge">.bashrc</code>.</p>

<p>Now I have Guile 2.2 installed using Guix in my Fedora 26!</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="scheme" /><category term="guile" /><summary type="html"><![CDATA[Few days before I upgraded to Fedora 26. Fedora has a package named guile22 which gives 2.2 version of Guile. But I wanted to try Guix. I noticed that there is Guix package in Copr repository. Then I enabled that repository and installed Guix.]]></summary></entry><entry><title type="html">Golang workshops for data scientists and students</title><link href="https://muthukadan.net/golang/talk/golang-workshops-data-scientists-students/" rel="alternate" type="text/html" title="Golang workshops for data scientists and students" /><published>2017-05-08T00:00:00+05:30</published><updated>2017-05-08T00:00:00+05:30</updated><id>https://muthukadan.net/golang/talk/golang-workshops-data-scientists-students</id><content type="html" xml:base="https://muthukadan.net/golang/talk/golang-workshops-data-scientists-students/"><![CDATA[<p>Last Saturday I conducted one more Go workshop in Bangalore.  The
meetup was organized by <a href="https://www.meetup.com/Practical-Data-Science-Workshops-Bangalore/">Practical Data
Science</a>
meetup group.  <a href="https://twitter.com/bargava">Bargava</a> took initiative
to organize this workshop.  The meetup was hosted at Red Hat Bangalore
office.  Some of my colleagues,
<a href="https://twitter.com/@zee_10000">Zeeshan</a>, <a href="https://twitter.com/surajd_">Suraj
D</a> and <a href="https://twitter.com/red_suraj">Suraj
N</a> volunteered for the meetup.</p>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">There were 50+ participants for today&#39;s <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> workshop at <a href="https://twitter.com/redhatindia?ref_src=twsrc%5Etfw">@redhatindia</a> Bangalore office! Thanks to <a href="https://twitter.com/bargava?ref_src=twsrc%5Etfw">@bargava</a> for organizing it. <a href="https://t.co/IsZFZsWGmG">pic.twitter.com/IsZFZsWGmG</a></p>&mdash; Baiju Muthukadan (@baijum) <a href="https://twitter.com/baijum/status/860836058757558272?ref_src=twsrc%5Etfw">May 6, 2017</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<p>I received lots of nice
<a href="https://www.meetup.com/Practical-Data-Science-Workshops-Bangalore/events/238824064">feedback</a>
for the workshop.  Thank you all :)</p>

<p>If fact, I had conducted another Go workshop last March as part of
<a href="http://fossmeet.in">FOSSMeet’17</a> at <a href="https://en.wikipedia.org/wiki/National_Institute_of_Technology_Calicut">NIT
Calicut</a>.
It was not really a planned workshop.  It was decided just few days
before the conference as one of their speaker couldn’t come.</p>

<p>One of the reason why I accepted the last moment invitation was the
nostalgia about going back to my college.  I came to this institute in
1998 and here I am taking a selfie :)</p>

<p><img src="https://www.dropbox.com/s/5jswshhv44udzrc/mb.jpg?raw=1" style="width: 560px" /></p>

<p>There was an <a href="https://smc.org.in">SMC hackathon</a> lead by
<a href="https://twitter.com/cbalasankar">Balasankar</a> and
<a href="https://twitter.com/jishnu7">Jishnu</a>:</p>

<p><img src="https://www.dropbox.com/s/5tiov2oqh13637g/smc.jpg?raw=1" style="width: 560px" /></p>

<p>I was able to spend some time with them also remembering it was 16
years before that I started <a href="https://ml.wikipedia.org/wiki/സ്വതന്ത്രമലയാളംകമ്പ്യൂട്ടിങ്ങ്">SMC</a> while studying there.</p>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="talk" /><summary type="html"><![CDATA[Last Saturday I conducted one more Go workshop in Bangalore. The meetup was organized by Practical Data Science meetup group. Bargava took initiative to organize this workshop. The meetup was hosted at Red Hat Bangalore office. Some of my colleagues, Zeeshan, Suraj D and Suraj N volunteered for the meetup.]]></summary></entry><entry><title type="html">Total 7 Golang workshops in 2016!</title><link href="https://muthukadan.net/golang/talk/total-7-golang-workshops/" rel="alternate" type="text/html" title="Total 7 Golang workshops in 2016!" /><published>2016-12-25T00:00:00+05:30</published><updated>2016-12-25T00:00:00+05:30</updated><id>https://muthukadan.net/golang/talk/total-7-golang-workshops</id><content type="html" xml:base="https://muthukadan.net/golang/talk/total-7-golang-workshops/"><![CDATA[<p>Last update about my Golang workshops was in June 2016.  In the last 6
months many things happened in my life.  I changed my job, after
working 9 years and 7 months at ZeOmega joined Red Hat.  Our second
son born in last August.  Became co-organizer of Bangalore Golang user
group and started organizing meetups.  Along with all these things,
conducted 3 more Golang workshops.</p>

<p>The 5th workshop was on July 9th at BangTheTable office organized by Bangalore Golang meetup group:</p>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Photos from today&#39;s 7 hour Go workshop at Bangalore <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> meetup. Thanks to <a href="https://twitter.com/BangtheTable?ref_src=twsrc%5Etfw">@BangtheTable</a> for hosting and lunch. <a href="https://t.co/buqluRYNxc">pic.twitter.com/buqluRYNxc</a></p>&mdash; Baiju Muthukadan (@baijum) <a href="https://twitter.com/baijum/status/751780223482408961?ref_src=twsrc%5Etfw">July 9, 2016</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<p>The 6th workshop was at Red Hat office:</p>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">My 6th <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> workshop at <a href="https://twitter.com/hashtag/redhat?src=hash&amp;ref_src=twsrc%5Etfw">#redhat</a> <a href="https://twitter.com/hashtag/bangalore?src=hash&amp;ref_src=twsrc%5Etfw">#bangalore</a> <a href="https://t.co/PmNJYIWBc7">pic.twitter.com/PmNJYIWBc7</a></p>&mdash; Baiju Muthukadan (@baijum) <a href="https://twitter.com/baijum/status/782204996787908608?ref_src=twsrc%5Etfw">October 1, 2016</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<p>The 7th workshop was in Trivandrum technopark organized by <a href="http://www.prathidhwani.org">Prathidhwani</a></p>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Today&#39;s <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> workshop was well received. Thanks to organizers and participants! <a href="https://t.co/ki48h1Ymei">pic.twitter.com/ki48h1Ymei</a></p>&mdash; Baiju Muthukadan (@baijum) <a href="https://twitter.com/baijum/status/807595399347191810?ref_src=twsrc%5Etfw">December 10, 2016</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>]]></content><author><name>Baiju Muthukadan</name></author><category term="golang" /><category term="talk" /><summary type="html"><![CDATA[Last update about my Golang workshops was in June 2016. In the last 6 months many things happened in my life. I changed my job, after working 9 years and 7 months at ZeOmega joined Red Hat. Our second son born in last August. Became co-organizer of Bangalore Golang user group and started organizing meetups. Along with all these things, conducted 3 more Golang workshops.]]></summary></entry></feed>